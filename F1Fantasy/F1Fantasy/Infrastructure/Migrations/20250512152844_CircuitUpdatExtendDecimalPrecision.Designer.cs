// <auto-generated />
using System;
using F1Fantasy.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace F1Fantasy.Infrastructure.Migrations
{
    [DbContext(typeof(WooF1Context))]
    [Migration("20250512152844_CircuitUpdatExtendDecimalPrecision")]
    partial class CircuitUpdatExtendDecimalPrecision
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("F1Fantasy.Core.Common.Circuit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CircuitName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ImgUrl")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(6,8)");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("Longtitude")
                        .HasColumnType("decimal(6,9)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Code");

                    b.ToTable("circuit");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.Constructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ImgUrl")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Code");

                    b.ToTable("constructor");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("family_name");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("given_name");

                    b.Property<string>("ImgUrl")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Code");

                    b.ToTable("driver");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.DriverPrediction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ConstructorId")
                        .HasColumnType("integer");

                    b.Property<bool>("Crashed")
                        .HasColumnType("boolean");

                    b.Property<int>("DriverId")
                        .HasColumnType("integer");

                    b.Property<int?>("FinalPosition")
                        .HasColumnType("integer");

                    b.Property<int?>("GridPosition")
                        .HasColumnType("integer");

                    b.Property<int>("PredictionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ConstructorId");

                    b.HasIndex("DriverId");

                    b.HasIndex("PredictionId");

                    b.ToTable("driver_prediction");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.FantasyLineup", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("PointsGained")
                        .HasColumnType("integer");

                    b.Property<int>("RaceId")
                        .HasColumnType("integer");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("integer");

                    b.Property<int>("TransferPointsDeducted")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.HasIndex("UserId");

                    b.ToTable("fantasy_lineup");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.FantasyLineupDriver", b =>
                {
                    b.Property<int>("FantasyLineupId")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.Property<int>("DriverId")
                        .HasColumnType("integer")
                        .HasColumnOrder(2);

                    b.HasKey("FantasyLineupId", "DriverId");

                    b.HasIndex("DriverId");

                    b.ToTable("fantasy_lineup_driver");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.League", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("MaxPlayersNum")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("league");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("CreatedAt")
                        .HasColumnType("integer")
                        .HasColumnName("created_at");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("notification");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.Powerup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("powerup");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.PowerupFantasyLineup", b =>
                {
                    b.Property<int>("FantasyLineupId")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.Property<int>("PowerupId")
                        .HasColumnType("integer")
                        .HasColumnOrder(2);

                    b.HasKey("FantasyLineupId", "PowerupId");

                    b.HasIndex("PowerupId");

                    b.ToTable("powerup_fantasy_lineup");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.Prediction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CircuitId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DatePredicted")
                        .HasColumnType("date")
                        .HasColumnName("datePredicted");

                    b.Property<int>("PredictYear")
                        .HasColumnType("integer");

                    b.Property<bool>("Rain")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CircuitId");

                    b.HasIndex("UserId");

                    b.ToTable("prediction");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CircuitId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DeadlineDate")
                        .HasColumnType("date")
                        .HasColumnName("deadline_date");

                    b.Property<DateTime>("RaceDate")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.HasKey("Id");

                    b.HasIndex("CircuitId");

                    b.ToTable("race");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.RaceEntry", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("DriverId")
                        .HasColumnType("integer");

                    b.Property<int?>("FastestLap")
                        .HasColumnType("integer");

                    b.Property<int?>("Grid")
                        .HasColumnType("integer");

                    b.Property<int>("PointsGained")
                        .HasColumnType("integer");

                    b.Property<int?>("Position")
                        .HasColumnType("integer");

                    b.Property<int>("RaceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("RaceId");

                    b.ToTable("race_entry");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AcceptNotification")
                        .HasColumnType("boolean");

                    b.Property<int>("ConstructorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("DriverId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("timestamp")
                        .HasColumnName("last_login");

                    b.Property<int>("LoginStreak")
                        .HasColumnType("integer");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("ConstructorId");

                    b.HasIndex("DriverId");

                    b.ToTable("user");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.UserLeague", b =>
                {
                    b.Property<int>("LeagueId")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnOrder(2);

                    b.HasKey("LeagueId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("user_league");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.DriverPrediction", b =>
                {
                    b.HasOne("F1Fantasy.Core.Common.Constructor", "Constructor")
                        .WithMany("DriverPredictions")
                        .HasForeignKey("ConstructorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("F1Fantasy.Core.Common.Driver", "Driver")
                        .WithMany("DriverPredictions")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("F1Fantasy.Core.Common.Prediction", "Prediction")
                        .WithMany("DriverPredictions")
                        .HasForeignKey("PredictionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Constructor");

                    b.Navigation("Driver");

                    b.Navigation("Prediction");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.FantasyLineup", b =>
                {
                    b.HasOne("F1Fantasy.Core.Common.Race", "Race")
                        .WithMany("FantasyLineups")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("F1Fantasy.Core.Common.User", "User")
                        .WithMany("FantasyLineups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Race");

                    b.Navigation("User");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.FantasyLineupDriver", b =>
                {
                    b.HasOne("F1Fantasy.Core.Common.Driver", "Driver")
                        .WithMany("FantasyLineupDrivers")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("F1Fantasy.Core.Common.FantasyLineup", "FantasyLineup")
                        .WithMany("FantasyLineupDrivers")
                        .HasForeignKey("FantasyLineupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("FantasyLineup");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.League", b =>
                {
                    b.HasOne("F1Fantasy.Core.Common.User", "User")
                        .WithMany("Leagues")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.Notification", b =>
                {
                    b.HasOne("F1Fantasy.Core.Common.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.PowerupFantasyLineup", b =>
                {
                    b.HasOne("F1Fantasy.Core.Common.FantasyLineup", "FantasyLineup")
                        .WithMany("PowerupFantasyLineups")
                        .HasForeignKey("FantasyLineupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("F1Fantasy.Core.Common.Powerup", "Powerup")
                        .WithMany("PowerupFantasyLineups")
                        .HasForeignKey("PowerupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FantasyLineup");

                    b.Navigation("Powerup");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.Prediction", b =>
                {
                    b.HasOne("F1Fantasy.Core.Common.Circuit", "Circuit")
                        .WithMany("Predictions")
                        .HasForeignKey("CircuitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("F1Fantasy.Core.Common.User", "User")
                        .WithMany("Predictions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Circuit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.Race", b =>
                {
                    b.HasOne("F1Fantasy.Core.Common.Circuit", "Circuit")
                        .WithMany("Races")
                        .HasForeignKey("CircuitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Circuit");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.RaceEntry", b =>
                {
                    b.HasOne("F1Fantasy.Core.Common.Driver", "Driver")
                        .WithMany("RaceEntries")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("F1Fantasy.Core.Common.Race", "Race")
                        .WithMany("RaceEntries")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.User", b =>
                {
                    b.HasOne("F1Fantasy.Core.Common.Constructor", "Constructor")
                        .WithMany("Users")
                        .HasForeignKey("ConstructorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("F1Fantasy.Core.Common.Driver", "Driver")
                        .WithMany("Users")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Constructor");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.UserLeague", b =>
                {
                    b.HasOne("F1Fantasy.Core.Common.League", "League")
                        .WithMany("UserLeagues")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("F1Fantasy.Core.Common.User", "User")
                        .WithMany("UserLeagues")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("League");

                    b.Navigation("User");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.Circuit", b =>
                {
                    b.Navigation("Predictions");

                    b.Navigation("Races");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.Constructor", b =>
                {
                    b.Navigation("DriverPredictions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.Driver", b =>
                {
                    b.Navigation("DriverPredictions");

                    b.Navigation("FantasyLineupDrivers");

                    b.Navigation("RaceEntries");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.FantasyLineup", b =>
                {
                    b.Navigation("FantasyLineupDrivers");

                    b.Navigation("PowerupFantasyLineups");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.League", b =>
                {
                    b.Navigation("UserLeagues");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.Powerup", b =>
                {
                    b.Navigation("PowerupFantasyLineups");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.Prediction", b =>
                {
                    b.Navigation("DriverPredictions");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.Race", b =>
                {
                    b.Navigation("FantasyLineups");

                    b.Navigation("RaceEntries");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.User", b =>
                {
                    b.Navigation("FantasyLineups");

                    b.Navigation("Leagues");

                    b.Navigation("Notifications");

                    b.Navigation("Predictions");

                    b.Navigation("UserLeagues");
                });
#pragma warning restore 612, 618
        }
    }
}
