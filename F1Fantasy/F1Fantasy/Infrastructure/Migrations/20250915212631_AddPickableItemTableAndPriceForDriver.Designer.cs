// <auto-generated />
using System;
using System.Collections.Generic;
using F1Fantasy.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace F1Fantasy.Infrastructure.Migrations
{
    [DbContext(typeof(WooF1Context))]
    [Migration("20250915212631_AddPickableItemTableAndPriceForDriver")]
    partial class AddPickableItemTableAndPriceForDriver
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DriverFantasyLineup", b =>
                {
                    b.Property<int>("DriversId")
                        .HasColumnType("integer")
                        .HasColumnName("drivers_id");

                    b.Property<int>("FantasyLineupsId")
                        .HasColumnType("integer")
                        .HasColumnName("fantasy_lineups_id");

                    b.HasKey("DriversId", "FantasyLineupsId")
                        .HasName("pk_driver_fantasy_lineup");

                    b.HasIndex("FantasyLineupsId")
                        .HasDatabaseName("ix_driver_fantasy_lineup_fantasy_lineups_id");

                    b.ToTable("driver_fantasy_lineup", (string)null);
                });

            modelBuilder.Entity("F1Fantasy.Core.Auth.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("F1Fantasy.Core.Auth.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("F1Fantasy.Core.Auth.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("F1Fantasy.Core.Auth.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("F1Fantasy.Core.Auth.ApplicationUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("F1Fantasy.Core.Auth.ApplicationUserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AcceptNotification")
                        .HasColumnType("boolean")
                        .HasColumnName("accept_notification");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<int?>("ConstructorId")
                        .HasColumnType("integer")
                        .HasColumnName("constructor_id");

                    b.Property<string>("CountryId")
                        .HasColumnType("character varying(100)")
                        .HasColumnName("country_id");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("display_name");

                    b.Property<int?>("DriverId")
                        .HasColumnType("integer")
                        .HasColumnName("driver_id");

                    b.Property<string>("Email")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<int?>("LoginStreak")
                        .HasColumnType("integer")
                        .HasColumnName("login_streak");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("ConstructorId")
                        .HasDatabaseName("ix_asp_net_users_constructor_id");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_asp_net_users_country_id");

                    b.HasIndex("DriverId")
                        .HasDatabaseName("ix_asp_net_users_driver_id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.Circuit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CircuitName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("circuit_name");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasColumnName("country_id");

                    b.Property<string>("ImgUrl")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("img_url");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(9,7)")
                        .HasColumnName("latitude");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("locality");

                    b.Property<decimal>("Longtitude")
                        .HasColumnType("decimal(10,7)")
                        .HasColumnName("longtitude");

                    b.HasKey("Id")
                        .HasName("pk_circuit");

                    b.HasAlternateKey("Code")
                        .HasName("ak_circuit_code");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_circuit_country_id");

                    b.ToTable("circuit", (string)null);
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.Constructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasColumnName("country_id");

                    b.Property<string>("ImgUrl")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("img_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("name");

                    b.Property<int?>("PickableItemId")
                        .HasColumnType("integer")
                        .HasColumnName("pickable_item_id");

                    b.HasKey("Id")
                        .HasName("pk_constructor");

                    b.HasAlternateKey("Code")
                        .HasName("ak_constructor_code");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_constructor_country_id");

                    b.HasIndex("PickableItemId")
                        .HasDatabaseName("ix_constructor_pickable_item_id");

                    b.ToTable("constructor", (string)null);
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.Country", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("id");

                    b.PrimitiveCollection<List<string>>("Nationalities")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("nationalities");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("short_name");

                    b.HasKey("Id")
                        .HasName("pk_country");

                    b.ToTable("country", (string)null);
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasColumnName("country_id");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("family_name");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("given_name");

                    b.Property<string>("ImgUrl")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("img_url");

                    b.Property<int?>("PickableItemId")
                        .HasColumnType("integer")
                        .HasColumnName("pickable_item_id");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("pk_driver");

                    b.HasAlternateKey("Code")
                        .HasName("ak_driver_code");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_driver_country_id");

                    b.HasIndex("PickableItemId")
                        .HasDatabaseName("ix_driver_pickable_item_id");

                    b.ToTable("driver", (string)null);
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.DriverPrediction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ConstructorId")
                        .HasColumnType("integer")
                        .HasColumnName("constructor_id");

                    b.Property<bool>("Crashed")
                        .HasColumnType("boolean")
                        .HasColumnName("crashed");

                    b.Property<int>("DriverId")
                        .HasColumnType("integer")
                        .HasColumnName("driver_id");

                    b.Property<int?>("FinalPosition")
                        .HasColumnType("integer")
                        .HasColumnName("final_position");

                    b.Property<int?>("GridPosition")
                        .HasColumnType("integer")
                        .HasColumnName("grid_position");

                    b.Property<int>("PredictionId")
                        .HasColumnType("integer")
                        .HasColumnName("prediction_id");

                    b.HasKey("Id")
                        .HasName("pk_driver_prediction");

                    b.HasIndex("ConstructorId")
                        .HasDatabaseName("ix_driver_prediction_constructor_id");

                    b.HasIndex("DriverId")
                        .HasDatabaseName("ix_driver_prediction_driver_id");

                    b.HasIndex("PredictionId")
                        .HasDatabaseName("ix_driver_prediction_prediction_id");

                    b.ToTable("driver_prediction", (string)null);
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.FantasyLineup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PointsGained")
                        .HasColumnType("integer")
                        .HasColumnName("points_gained");

                    b.Property<int>("RaceId")
                        .HasColumnType("integer")
                        .HasColumnName("race_id");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("integer")
                        .HasColumnName("total_amount");

                    b.Property<int>("TransferPointsDeducted")
                        .HasColumnType("integer")
                        .HasColumnName("transfer_points_deducted");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_fantasy_lineup");

                    b.HasIndex("RaceId")
                        .HasDatabaseName("ix_fantasy_lineup_race_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_fantasy_lineup_user_id");

                    b.ToTable("fantasy_lineup", (string)null);
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.FantasyLineupDriver", b =>
                {
                    b.Property<int>("FantasyLineupId")
                        .HasColumnType("integer")
                        .HasColumnName("fantasy_lineup_id")
                        .HasColumnOrder(1);

                    b.Property<int>("DriverId")
                        .HasColumnType("integer")
                        .HasColumnName("driver_id")
                        .HasColumnOrder(2);

                    b.HasKey("FantasyLineupId", "DriverId")
                        .HasName("pk_fantasy_lineup_driver");

                    b.HasIndex("DriverId")
                        .HasDatabaseName("ix_fantasy_lineup_driver_driver_id");

                    b.ToTable("fantasy_lineup_driver", (string)null);
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.League", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<int>("MaxPlayersNum")
                        .HasColumnType("integer")
                        .HasColumnName("max_players_num");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("owner_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_league");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_league_owner_id");

                    b.ToTable("league", (string)null);
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("content");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("header");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_notification");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_notification_user_id");

                    b.ToTable("notification", (string)null);
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.PickableItem", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.HasKey("Id")
                        .HasName("pk_pickable_item");

                    b.ToTable("pickable_item", (string)null);
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.Powerup", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("img_url");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_powerup");

                    b.HasAlternateKey("Type")
                        .HasName("ak_powerup_type");

                    b.ToTable("powerup", (string)null);
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.PowerupFantasyLineup", b =>
                {
                    b.Property<int>("FantasyLineupId")
                        .HasColumnType("integer")
                        .HasColumnName("fantasy_lineup_id")
                        .HasColumnOrder(1);

                    b.Property<int>("PowerupId")
                        .HasColumnType("integer")
                        .HasColumnName("powerup_id")
                        .HasColumnOrder(2);

                    b.Property<int?>("DriverId")
                        .HasColumnType("integer")
                        .HasColumnName("driver_id");

                    b.HasKey("FantasyLineupId", "PowerupId")
                        .HasName("pk_powerup_fantasy_lineup");

                    b.HasIndex("DriverId")
                        .HasDatabaseName("ix_powerup_fantasy_lineup_driver_id");

                    b.HasIndex("PowerupId")
                        .HasDatabaseName("ix_powerup_fantasy_lineup_powerup_id");

                    b.ToTable("powerup_fantasy_lineup", (string)null);
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.Prediction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CircuitId")
                        .HasColumnType("integer")
                        .HasColumnName("circuit_id");

                    b.Property<DateOnly>("DatePredicted")
                        .HasColumnType("date")
                        .HasColumnName("date_predicted");

                    b.Property<int>("PredictYear")
                        .HasColumnType("integer")
                        .HasColumnName("predict_year");

                    b.Property<bool>("Rain")
                        .HasColumnType("boolean")
                        .HasColumnName("rain");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_prediction");

                    b.HasIndex("CircuitId")
                        .HasDatabaseName("ix_prediction_circuit_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_prediction_user_id");

                    b.ToTable("prediction", (string)null);
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Calculated")
                        .HasColumnType("boolean")
                        .HasColumnName("calculated");

                    b.Property<int>("CircuitId")
                        .HasColumnType("integer")
                        .HasColumnName("circuit_id");

                    b.Property<DateOnly>("DeadlineDate")
                        .HasColumnType("date")
                        .HasColumnName("deadline_date");

                    b.Property<DateOnly>("RaceDate")
                        .HasColumnType("date")
                        .HasColumnName("race_date");

                    b.Property<int>("Round")
                        .HasColumnType("integer")
                        .HasColumnName("round");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer")
                        .HasColumnName("season_id");

                    b.HasKey("Id")
                        .HasName("pk_race");

                    b.HasIndex("CircuitId")
                        .HasDatabaseName("ix_race_circuit_id");

                    b.HasIndex("SeasonId")
                        .HasDatabaseName("ix_race_season_id");

                    b.ToTable("race", (string)null);
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.RaceEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ConstructorId")
                        .HasColumnType("integer")
                        .HasColumnName("constructor_id");

                    b.Property<int>("DriverId")
                        .HasColumnType("integer")
                        .HasColumnName("driver_id");

                    b.Property<int?>("FastestLap")
                        .HasColumnType("integer")
                        .HasColumnName("fastest_lap");

                    b.Property<bool>("Finished")
                        .HasColumnType("boolean")
                        .HasColumnName("finished");

                    b.Property<int?>("Grid")
                        .HasColumnType("integer")
                        .HasColumnName("grid");

                    b.Property<int>("PointsGained")
                        .HasColumnType("integer")
                        .HasColumnName("points_gained");

                    b.Property<int?>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.Property<int>("RaceId")
                        .HasColumnType("integer")
                        .HasColumnName("race_id");

                    b.HasKey("Id")
                        .HasName("pk_race_entry");

                    b.HasIndex("ConstructorId")
                        .HasDatabaseName("ix_race_entry_constructor_id");

                    b.HasIndex("DriverId")
                        .HasDatabaseName("ix_race_entry_driver_id");

                    b.HasIndex("RaceId")
                        .HasDatabaseName("ix_race_entry_race_id");

                    b.ToTable("race_entry", (string)null);
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Id")
                        .HasName("pk_season");

                    b.HasAlternateKey("Year")
                        .HasName("ak_season_year");

                    b.ToTable("season", (string)null);
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.UserLeague", b =>
                {
                    b.Property<int>("LeagueId")
                        .HasColumnType("integer")
                        .HasColumnName("league_id")
                        .HasColumnOrder(1);

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id")
                        .HasColumnOrder(2);

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_accepted");

                    b.HasKey("LeagueId", "UserId")
                        .HasName("pk_user_league");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_league_user_id");

                    b.ToTable("user_league", (string)null);
                });

            modelBuilder.Entity("FantasyLineupPowerup", b =>
                {
                    b.Property<int>("FantasyLineupsId")
                        .HasColumnType("integer")
                        .HasColumnName("fantasy_lineups_id");

                    b.Property<int>("PowerupsId")
                        .HasColumnType("integer")
                        .HasColumnName("powerups_id");

                    b.HasKey("FantasyLineupsId", "PowerupsId")
                        .HasName("pk_fantasy_lineup_powerup");

                    b.HasIndex("PowerupsId")
                        .HasDatabaseName("ix_fantasy_lineup_powerup_powerups_id");

                    b.ToTable("fantasy_lineup_powerup", (string)null);
                });

            modelBuilder.Entity("DriverFantasyLineup", b =>
                {
                    b.HasOne("F1Fantasy.Core.Common.Driver", null)
                        .WithMany()
                        .HasForeignKey("DriversId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_driver_fantasy_lineup_driver_drivers_id");

                    b.HasOne("F1Fantasy.Core.Common.FantasyLineup", null)
                        .WithMany()
                        .HasForeignKey("FantasyLineupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_driver_fantasy_lineup_fantasy_lineup_fantasy_lineups_id");
                });

            modelBuilder.Entity("F1Fantasy.Core.Auth.ApplicationRoleClaim", b =>
                {
                    b.HasOne("F1Fantasy.Core.Auth.ApplicationRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("F1Fantasy.Core.Auth.ApplicationUserClaim", b =>
                {
                    b.HasOne("F1Fantasy.Core.Common.ApplicationUser", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("F1Fantasy.Core.Auth.ApplicationUserLogin", b =>
                {
                    b.HasOne("F1Fantasy.Core.Common.ApplicationUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("F1Fantasy.Core.Auth.ApplicationUserRole", b =>
                {
                    b.HasOne("F1Fantasy.Core.Auth.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("F1Fantasy.Core.Common.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("F1Fantasy.Core.Auth.ApplicationUserToken", b =>
                {
                    b.HasOne("F1Fantasy.Core.Common.ApplicationUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.ApplicationUser", b =>
                {
                    b.HasOne("F1Fantasy.Core.Common.Constructor", "Constructor")
                        .WithMany("Users")
                        .HasForeignKey("ConstructorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_asp_net_users_constructor_constructor_id");

                    b.HasOne("F1Fantasy.Core.Common.Country", "Country")
                        .WithMany("Users")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("fk_asp_net_users_country_country_id");

                    b.HasOne("F1Fantasy.Core.Common.Driver", "Driver")
                        .WithMany("Users")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_asp_net_users_driver_driver_id");

                    b.Navigation("Constructor");

                    b.Navigation("Country");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.Circuit", b =>
                {
                    b.HasOne("F1Fantasy.Core.Common.Country", "Country")
                        .WithMany("Circuits")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_circuit_country_country_id");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.Constructor", b =>
                {
                    b.HasOne("F1Fantasy.Core.Common.Country", "Country")
                        .WithMany("Constructors")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_constructor_country_country_id");

                    b.HasOne("F1Fantasy.Core.Common.PickableItem", "PickableItem")
                        .WithMany("Constructors")
                        .HasForeignKey("PickableItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_constructor_pickable_item_pickable_item_id");

                    b.Navigation("Country");

                    b.Navigation("PickableItem");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.Driver", b =>
                {
                    b.HasOne("F1Fantasy.Core.Common.Country", "Country")
                        .WithMany("Drivers")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_driver_country_country_id");

                    b.HasOne("F1Fantasy.Core.Common.PickableItem", "PickableItem")
                        .WithMany("Drivers")
                        .HasForeignKey("PickableItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_driver_pickable_item_pickable_item_id");

                    b.Navigation("Country");

                    b.Navigation("PickableItem");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.DriverPrediction", b =>
                {
                    b.HasOne("F1Fantasy.Core.Common.Constructor", "Constructor")
                        .WithMany("DriverPredictions")
                        .HasForeignKey("ConstructorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_driver_prediction_constructor_constructor_id");

                    b.HasOne("F1Fantasy.Core.Common.Driver", "Driver")
                        .WithMany("DriverPredictions")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_driver_prediction_driver_driver_id");

                    b.HasOne("F1Fantasy.Core.Common.Prediction", "Prediction")
                        .WithMany("DriverPredictions")
                        .HasForeignKey("PredictionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_driver_prediction_prediction_prediction_id");

                    b.Navigation("Constructor");

                    b.Navigation("Driver");

                    b.Navigation("Prediction");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.FantasyLineup", b =>
                {
                    b.HasOne("F1Fantasy.Core.Common.Race", "Race")
                        .WithMany("FantasyLineups")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_fantasy_lineup_race_race_id");

                    b.HasOne("F1Fantasy.Core.Common.ApplicationUser", "User")
                        .WithMany("FantasyLineups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_fantasy_lineup_application_user_user_id");

                    b.Navigation("Race");

                    b.Navigation("User");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.FantasyLineupDriver", b =>
                {
                    b.HasOne("F1Fantasy.Core.Common.Driver", "Driver")
                        .WithMany("FantasyLineupDrivers")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_fantasy_lineup_driver_driver_driver_id");

                    b.HasOne("F1Fantasy.Core.Common.FantasyLineup", "FantasyLineup")
                        .WithMany("FantasyLineupDrivers")
                        .HasForeignKey("FantasyLineupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_fantasy_lineup_driver_fantasy_lineup_fantasy_lineup_id");

                    b.Navigation("Driver");

                    b.Navigation("FantasyLineup");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.League", b =>
                {
                    b.HasOne("F1Fantasy.Core.Common.ApplicationUser", "User")
                        .WithMany("Leagues")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_league_application_user_owner_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.Notification", b =>
                {
                    b.HasOne("F1Fantasy.Core.Common.ApplicationUser", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_notification_application_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.PowerupFantasyLineup", b =>
                {
                    b.HasOne("F1Fantasy.Core.Common.Driver", "Driver")
                        .WithMany("PowerupFantasyLineups")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_powerup_fantasy_lineup_driver_driver_id");

                    b.HasOne("F1Fantasy.Core.Common.FantasyLineup", "FantasyLineup")
                        .WithMany("PowerupFantasyLineups")
                        .HasForeignKey("FantasyLineupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_powerup_fantasy_lineup_fantasy_lineup_fantasy_lineup_id");

                    b.HasOne("F1Fantasy.Core.Common.Powerup", "Powerup")
                        .WithMany("PowerupFantasyLineups")
                        .HasForeignKey("PowerupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_powerup_fantasy_lineup_powerup_powerup_id");

                    b.Navigation("Driver");

                    b.Navigation("FantasyLineup");

                    b.Navigation("Powerup");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.Prediction", b =>
                {
                    b.HasOne("F1Fantasy.Core.Common.Circuit", "Circuit")
                        .WithMany("Predictions")
                        .HasForeignKey("CircuitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_prediction_circuit_circuit_id");

                    b.HasOne("F1Fantasy.Core.Common.ApplicationUser", "User")
                        .WithMany("Predictions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_prediction_application_user_user_id");

                    b.Navigation("Circuit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.Race", b =>
                {
                    b.HasOne("F1Fantasy.Core.Common.Circuit", "Circuit")
                        .WithMany("Races")
                        .HasForeignKey("CircuitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_race_circuit_circuit_id");

                    b.HasOne("F1Fantasy.Core.Common.Season", "Season")
                        .WithMany("Races")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_race_season_season_id");

                    b.Navigation("Circuit");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.RaceEntry", b =>
                {
                    b.HasOne("F1Fantasy.Core.Common.Constructor", "Constructor")
                        .WithMany("RaceEntries")
                        .HasForeignKey("ConstructorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_race_entry_constructor_constructor_id");

                    b.HasOne("F1Fantasy.Core.Common.Driver", "Driver")
                        .WithMany("RaceEntries")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_race_entry_driver_driver_id");

                    b.HasOne("F1Fantasy.Core.Common.Race", "Race")
                        .WithMany("RaceEntries")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_race_entry_race_race_id");

                    b.Navigation("Constructor");

                    b.Navigation("Driver");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.UserLeague", b =>
                {
                    b.HasOne("F1Fantasy.Core.Common.League", "League")
                        .WithMany("UserLeagues")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_user_league_league_league_id");

                    b.HasOne("F1Fantasy.Core.Common.ApplicationUser", "User")
                        .WithMany("UserLeagues")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_user_league_application_user_user_id");

                    b.Navigation("League");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FantasyLineupPowerup", b =>
                {
                    b.HasOne("F1Fantasy.Core.Common.FantasyLineup", null)
                        .WithMany()
                        .HasForeignKey("FantasyLineupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fantasy_lineup_powerup_fantasy_lineup_fantasy_lineups_id");

                    b.HasOne("F1Fantasy.Core.Common.Powerup", null)
                        .WithMany()
                        .HasForeignKey("PowerupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fantasy_lineup_powerup_powerup_powerups_id");
                });

            modelBuilder.Entity("F1Fantasy.Core.Auth.ApplicationRole", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.ApplicationUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("FantasyLineups");

                    b.Navigation("Leagues");

                    b.Navigation("Logins");

                    b.Navigation("Notifications");

                    b.Navigation("Predictions");

                    b.Navigation("Tokens");

                    b.Navigation("UserLeagues");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.Circuit", b =>
                {
                    b.Navigation("Predictions");

                    b.Navigation("Races");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.Constructor", b =>
                {
                    b.Navigation("DriverPredictions");

                    b.Navigation("RaceEntries");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.Country", b =>
                {
                    b.Navigation("Circuits");

                    b.Navigation("Constructors");

                    b.Navigation("Drivers");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.Driver", b =>
                {
                    b.Navigation("DriverPredictions");

                    b.Navigation("FantasyLineupDrivers");

                    b.Navigation("PowerupFantasyLineups");

                    b.Navigation("RaceEntries");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.FantasyLineup", b =>
                {
                    b.Navigation("FantasyLineupDrivers");

                    b.Navigation("PowerupFantasyLineups");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.League", b =>
                {
                    b.Navigation("UserLeagues");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.PickableItem", b =>
                {
                    b.Navigation("Constructors");

                    b.Navigation("Drivers");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.Powerup", b =>
                {
                    b.Navigation("PowerupFantasyLineups");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.Prediction", b =>
                {
                    b.Navigation("DriverPredictions");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.Race", b =>
                {
                    b.Navigation("FantasyLineups");

                    b.Navigation("RaceEntries");
                });

            modelBuilder.Entity("F1Fantasy.Core.Common.Season", b =>
                {
                    b.Navigation("Races");
                });
#pragma warning restore 612, 618
        }
    }
}
