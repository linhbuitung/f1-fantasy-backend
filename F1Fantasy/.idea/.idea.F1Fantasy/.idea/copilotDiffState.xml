<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/F1Fantasy/Core/Policies/Policies.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/F1Fantasy/Core/Policies/Policies.cs" />
              <option name="originalContent" value="namespace F1Fantasy.Core.Policies;&#10;&#10;public class Policies&#10;{&#10;    &#10;}" />
              <option name="updatedContent" value="namespace F1Fantasy.Core.Policies;&#10;&#10;public static class Policies&#10;{&#10;    public const string CanEditOwnProfile = &quot;CanEditOwnProfile&quot;;&#10;&#10;    public static void AddCustomPolicies(AuthorizationOptions options)&#10;    {&#10;        options.AddPolicy(CanEditOwnProfile, policy =&gt;&#10;            policy.RequireAssertion(context =&gt;&#10;            {&#10;                if (context.Resource is string userId)&#10;                {&#10;                    var claim = context.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier);&#10;                    return claim != null &amp;&amp; claim.Value == userId;&#10;                }&#10;                return false;&#10;            })&#10;        );&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/F1Fantasy/Modules/UserModule/Repositories/Implementations/UserRepository.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/F1Fantasy/Modules/UserModule/Repositories/Implementations/UserRepository.cs" />
              <option name="originalContent" value="using F1Fantasy.Core.Common;&#10;using F1Fantasy.Infrastructure.Contexts;&#10;using Microsoft.EntityFrameworkCore;&#10;&#10;namespace F1Fantasy.Modules.UserModule.Repositories.Implementations;&#10;&#10;public class UserRepository&#10;{&#10;    private readonly WooF1Context _context;&#10;&#10;    public UserRepository(WooF1Context context)&#10;    {&#10;        _context = context;&#10;    }&#10;&#10;    public async Task&lt;ApplicationUser&gt; UpdateUserAsync(ApplicationUser user)&#10;    {&#10;        var existingUser = await _context.Users.AsNoTracking().FirstOrDefaultAsync(u =&gt; u.Id == user.Id);&#10;        if (existingUser == null)&#10;        {&#10;            throw new Exception($&quot;User with ID {user.Id} not found.&quot;);&#10;        }&#10;        _context.Users.Update(user);&#10;        &#10;        await _context.SaveChangesAsync();&#10;        return user;&#10;    }&#10;&#10;    public async Task&lt;ApplicationUser&gt; GetUserByIdAsync(int id)&#10;    {&#10;        return await _context.Users.AsNoTracking().FirstOrDefaultAsync(d =&gt; d.Id == id);&#10;    }&#10;&#10;    public async Task&lt;List&lt;ApplicationUser&gt;&gt; FindUserByDisplayNameAsync(string name)&#10;    {&#10;        return await _context.Users.AsNoTracking()&#10;            .Where(user =&gt; user.DisplayName != null &amp;&amp; user.DisplayName.ToLower().Contains(name.ToLower()))&#10;            .ToListAsync();&#10;    }&#10;&#10;}" />
              <option name="updatedContent" value="using F1Fantasy.Core.Common;&#10;using F1Fantasy.Infrastructure.Contexts;&#10;using Microsoft.EntityFrameworkCore;&#10;&#10;namespace F1Fantasy.Modules.UserModule.Repositories.Implementations;&#10;&#10;public class UserRepository&#10;{&#10;    private readonly WooF1Context _context;&#10;&#10;    public UserRepository(WooF1Context context)&#10;    {&#10;        _context = context;&#10;    }&#10;&#10;    public async Task&lt;ApplicationUser&gt; UpdateUserAsync(ApplicationUser user)&#10;    {&#10;        var existingUser = await _context.Users.FirstOrDefaultAsync(u =&gt; u.Id == user.Id);&#10;        if (existingUser == null)&#10;        {&#10;            throw new Exception($&quot;User with ID {user.Id} not found.&quot;);&#10;        }&#10;        // Update only the properties you want to allow&#10;        existingUser.DisplayName = user.DisplayName;&#10;        existingUser.Email = user.Email;&#10;        // Add other properties as needed&#10;&#10;        await _context.SaveChangesAsync();&#10;        return existingUser;&#10;    }&#10;&#10;    public async Task&lt;ApplicationUser&gt; GetUserByIdAsync(int id)&#10;    {&#10;        return await _context.Users.AsNoTracking().FirstOrDefaultAsync(d =&gt; d.Id == id);&#10;    }&#10;&#10;    public async Task&lt;List&lt;ApplicationUser&gt;&gt; FindUserByDisplayNameAsync(string name)&#10;    {&#10;        return await _context.Users.AsNoTracking()&#10;            .Where(user =&gt; user.DisplayName != null &amp;&amp; user.DisplayName.ToLower().Contains(name.ToLower()))&#10;            .ToListAsync();&#10;    }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>