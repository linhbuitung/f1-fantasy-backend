// <auto-generated />
using System;
using F1FantasyWorker.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace F1FantasyWorker.Migrations
{
    [DbContext(typeof(WooF1Context))]
    partial class WooF1ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex(new[] { "RoleId" }, "ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("F1FantasyWorker.Core.Common.AspNetRole", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique();

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("F1FantasyWorker.Core.Common.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex(new[] { "RoleId" }, "ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("F1FantasyWorker.Core.Common.AspNetUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("AcceptNotification")
                        .HasColumnType("boolean")
                        .HasColumnName("accept_notification");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<Guid?>("ConstructorId")
                        .HasColumnType("uuid")
                        .HasColumnName("constructor_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("display_name");

                    b.Property<Guid?>("DriverId")
                        .HasColumnType("uuid")
                        .HasColumnName("driver_id");

                    b.Property<string>("Email")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<int>("LoginStreak")
                        .HasColumnType("integer")
                        .HasColumnName("login_streak");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nationality");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique();

                    b.HasIndex(new[] { "ConstructorId" }, "ix_asp_net_users_constructor_id");

                    b.HasIndex(new[] { "DriverId" }, "ix_asp_net_users_driver_id");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("F1FantasyWorker.Core.Common.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex(new[] { "UserId" }, "ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("F1FantasyWorker.Core.Common.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex(new[] { "UserId" }, "ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("F1FantasyWorker.Core.Common.AspNetUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("F1FantasyWorker.Core.Common.Circuit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CircuitName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("circuit_name");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("country");

                    b.Property<string>("ImgUrl")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("img_url");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(9, 7)
                        .HasColumnType("numeric(9,7)")
                        .HasColumnName("latitude");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("locality");

                    b.Property<decimal>("Longtitude")
                        .HasPrecision(10, 7)
                        .HasColumnType("numeric(10,7)")
                        .HasColumnName("longtitude");

                    b.HasKey("Id")
                        .HasName("pk_circuit");

                    b.HasIndex(new[] { "Code" }, "ak_circuit_code")
                        .IsUnique();

                    b.ToTable("circuit", (string)null);
                });

            modelBuilder.Entity("F1FantasyWorker.Core.Common.Constructor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<string>("ImgUrl")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("img_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("name");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("nationality");

                    b.HasKey("Id")
                        .HasName("pk_constructor");

                    b.HasIndex(new[] { "Code" }, "ak_constructor_code")
                        .IsUnique();

                    b.ToTable("constructor", (string)null);
                });

            modelBuilder.Entity("F1FantasyWorker.Core.Common.Driver", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("family_name");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("given_name");

                    b.Property<string>("ImgUrl")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("img_url");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("nationality");

                    b.HasKey("Id")
                        .HasName("pk_driver");

                    b.HasIndex(new[] { "Code" }, "ak_driver_code")
                        .IsUnique();

                    b.ToTable("driver", (string)null);
                });

            modelBuilder.Entity("F1FantasyWorker.Core.Common.DriverPrediction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ConstructorId")
                        .HasColumnType("uuid")
                        .HasColumnName("constructor_id");

                    b.Property<bool>("Crashed")
                        .HasColumnType("boolean")
                        .HasColumnName("crashed");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uuid")
                        .HasColumnName("driver_id");

                    b.Property<int?>("FinalPosition")
                        .HasColumnType("integer")
                        .HasColumnName("final_position");

                    b.Property<int?>("GridPosition")
                        .HasColumnType("integer")
                        .HasColumnName("grid_position");

                    b.Property<Guid>("PredictionId")
                        .HasColumnType("uuid")
                        .HasColumnName("prediction_id");

                    b.HasKey("Id")
                        .HasName("pk_driver_prediction");

                    b.HasIndex(new[] { "ConstructorId" }, "ix_driver_prediction_constructor_id");

                    b.HasIndex(new[] { "DriverId" }, "ix_driver_prediction_driver_id");

                    b.HasIndex(new[] { "PredictionId" }, "ix_driver_prediction_prediction_id");

                    b.ToTable("driver_prediction", (string)null);
                });

            modelBuilder.Entity("F1FantasyWorker.Core.Common.FantasyLineup", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("PointsGained")
                        .HasColumnType("integer")
                        .HasColumnName("points_gained");

                    b.Property<Guid>("RaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("race_id");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("integer")
                        .HasColumnName("total_amount");

                    b.Property<int>("TransferPointsDeducted")
                        .HasColumnType("integer")
                        .HasColumnName("transfer_points_deducted");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_fantasy_lineup");

                    b.HasIndex(new[] { "RaceId" }, "ix_fantasy_lineup_race_id");

                    b.HasIndex(new[] { "UserId" }, "ix_fantasy_lineup_user_id");

                    b.ToTable("fantasy_lineup", (string)null);
                });

            modelBuilder.Entity("F1FantasyWorker.Core.Common.League", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<int>("MaxPlayersNum")
                        .HasColumnType("integer")
                        .HasColumnName("max_players_num");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("type");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_league");

                    b.HasIndex(new[] { "UserId" }, "ix_league_user_id");

                    b.ToTable("league", (string)null);
                });

            modelBuilder.Entity("F1FantasyWorker.Core.Common.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("content");

                    b.Property<int>("CreatedAt")
                        .HasColumnType("integer")
                        .HasColumnName("created_at");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("header");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_notification");

                    b.HasIndex(new[] { "UserId" }, "ix_notification_user_id");

                    b.ToTable("notification", (string)null);
                });

            modelBuilder.Entity("F1FantasyWorker.Core.Common.Powerup", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("img_url");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_powerup");

                    b.ToTable("powerup", (string)null);
                });

            modelBuilder.Entity("F1FantasyWorker.Core.Common.Prediction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CircuitId")
                        .HasColumnType("uuid")
                        .HasColumnName("circuit_id");

                    b.Property<DateOnly>("DatePredicted")
                        .HasColumnType("date")
                        .HasColumnName("datePredicted");

                    b.Property<int>("PredictYear")
                        .HasColumnType("integer")
                        .HasColumnName("predict_year");

                    b.Property<bool>("Rain")
                        .HasColumnType("boolean")
                        .HasColumnName("rain");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_prediction");

                    b.HasIndex(new[] { "CircuitId" }, "ix_prediction_circuit_id");

                    b.HasIndex(new[] { "UserId" }, "ix_prediction_user_id");

                    b.ToTable("prediction", (string)null);
                });

            modelBuilder.Entity("F1FantasyWorker.Core.Common.Race", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Calculated")
                        .HasColumnType("boolean")
                        .HasColumnName("calculated");

                    b.Property<Guid>("CircuitId")
                        .HasColumnType("uuid")
                        .HasColumnName("circuit_id");

                    b.Property<DateOnly>("DeadlineDate")
                        .HasColumnType("date")
                        .HasColumnName("deadline_date");

                    b.Property<DateOnly>("RaceDate")
                        .HasColumnType("date")
                        .HasColumnName("race_date");

                    b.HasKey("Id")
                        .HasName("pk_race");

                    b.HasIndex(new[] { "CircuitId" }, "ix_race_circuit_id");

                    b.ToTable("race", (string)null);
                });

            modelBuilder.Entity("F1FantasyWorker.Core.Common.RaceEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uuid")
                        .HasColumnName("driver_id");

                    b.Property<int?>("FastestLap")
                        .HasColumnType("integer")
                        .HasColumnName("fastest_lap");

                    b.Property<int?>("Grid")
                        .HasColumnType("integer")
                        .HasColumnName("grid");

                    b.Property<int>("PointsGained")
                        .HasColumnType("integer")
                        .HasColumnName("points_gained");

                    b.Property<int?>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.Property<Guid>("RaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("race_id");

                    b.HasKey("Id")
                        .HasName("pk_race_entry");

                    b.HasIndex(new[] { "DriverId" }, "ix_race_entry_driver_id");

                    b.HasIndex(new[] { "RaceId" }, "ix_race_entry_race_id");

                    b.ToTable("race_entry", (string)null);
                });

            modelBuilder.Entity("FantasyLineupDriver", b =>
                {
                    b.Property<Guid>("FantasyLineupId")
                        .HasColumnType("uuid")
                        .HasColumnName("fantasy_lineup_id");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uuid")
                        .HasColumnName("driver_id");

                    b.HasKey("FantasyLineupId", "DriverId")
                        .HasName("pk_fantasy_lineup_driver");

                    b.HasIndex(new[] { "DriverId" }, "ix_fantasy_lineup_driver_driver_id");

                    b.ToTable("fantasy_lineup_driver", (string)null);
                });

            modelBuilder.Entity("PowerupFantasyLineup", b =>
                {
                    b.Property<Guid>("FantasyLineupId")
                        .HasColumnType("uuid")
                        .HasColumnName("fantasy_lineup_id");

                    b.Property<Guid>("PowerupId")
                        .HasColumnType("uuid")
                        .HasColumnName("powerup_id");

                    b.HasKey("FantasyLineupId", "PowerupId")
                        .HasName("pk_powerup_fantasy_lineup");

                    b.HasIndex(new[] { "PowerupId" }, "ix_powerup_fantasy_lineup_powerup_id");

                    b.ToTable("powerup_fantasy_lineup", (string)null);
                });

            modelBuilder.Entity("UserLeague", b =>
                {
                    b.Property<Guid>("LeagueId")
                        .HasColumnType("uuid")
                        .HasColumnName("league_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("LeagueId", "UserId")
                        .HasName("pk_user_league");

                    b.HasIndex(new[] { "UserId" }, "ix_user_league_user_id");

                    b.ToTable("user_league", (string)null);
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("F1FantasyWorker.Core.Common.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("F1FantasyWorker.Core.Common.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("F1FantasyWorker.Core.Common.AspNetRoleClaim", b =>
                {
                    b.HasOne("F1FantasyWorker.Core.Common.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("F1FantasyWorker.Core.Common.AspNetUser", b =>
                {
                    b.HasOne("F1FantasyWorker.Core.Common.Constructor", "Constructor")
                        .WithMany("AspNetUsers")
                        .HasForeignKey("ConstructorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_asp_net_users_constructor_constructor_id");

                    b.HasOne("F1FantasyWorker.Core.Common.Driver", "Driver")
                        .WithMany("AspNetUsers")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_asp_net_users_driver_driver_id");

                    b.Navigation("Constructor");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("F1FantasyWorker.Core.Common.AspNetUserClaim", b =>
                {
                    b.HasOne("F1FantasyWorker.Core.Common.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("F1FantasyWorker.Core.Common.AspNetUserLogin", b =>
                {
                    b.HasOne("F1FantasyWorker.Core.Common.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("F1FantasyWorker.Core.Common.AspNetUserToken", b =>
                {
                    b.HasOne("F1FantasyWorker.Core.Common.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("F1FantasyWorker.Core.Common.DriverPrediction", b =>
                {
                    b.HasOne("F1FantasyWorker.Core.Common.Constructor", "Constructor")
                        .WithMany("DriverPredictions")
                        .HasForeignKey("ConstructorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_driver_prediction_constructor_constructor_id");

                    b.HasOne("F1FantasyWorker.Core.Common.Driver", "Driver")
                        .WithMany("DriverPredictions")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_driver_prediction_driver_driver_id");

                    b.HasOne("F1FantasyWorker.Core.Common.Prediction", "Prediction")
                        .WithMany("DriverPredictions")
                        .HasForeignKey("PredictionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_driver_prediction_prediction_prediction_id");

                    b.Navigation("Constructor");

                    b.Navigation("Driver");

                    b.Navigation("Prediction");
                });

            modelBuilder.Entity("F1FantasyWorker.Core.Common.FantasyLineup", b =>
                {
                    b.HasOne("F1FantasyWorker.Core.Common.Race", "Race")
                        .WithMany("FantasyLineups")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_fantasy_lineup_race_race_id");

                    b.HasOne("F1FantasyWorker.Core.Common.AspNetUser", "User")
                        .WithMany("FantasyLineups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_fantasy_lineup_application_user_user_id");

                    b.Navigation("Race");

                    b.Navigation("User");
                });

            modelBuilder.Entity("F1FantasyWorker.Core.Common.League", b =>
                {
                    b.HasOne("F1FantasyWorker.Core.Common.AspNetUser", "User")
                        .WithMany("Leagues")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_league_application_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("F1FantasyWorker.Core.Common.Notification", b =>
                {
                    b.HasOne("F1FantasyWorker.Core.Common.AspNetUser", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_notification_application_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("F1FantasyWorker.Core.Common.Prediction", b =>
                {
                    b.HasOne("F1FantasyWorker.Core.Common.Circuit", "Circuit")
                        .WithMany("Predictions")
                        .HasForeignKey("CircuitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_prediction_circuit_circuit_id");

                    b.HasOne("F1FantasyWorker.Core.Common.AspNetUser", "User")
                        .WithMany("Predictions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_prediction_application_user_user_id");

                    b.Navigation("Circuit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("F1FantasyWorker.Core.Common.Race", b =>
                {
                    b.HasOne("F1FantasyWorker.Core.Common.Circuit", "Circuit")
                        .WithMany("Races")
                        .HasForeignKey("CircuitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_race_circuit_circuit_id");

                    b.Navigation("Circuit");
                });

            modelBuilder.Entity("F1FantasyWorker.Core.Common.RaceEntry", b =>
                {
                    b.HasOne("F1FantasyWorker.Core.Common.Driver", "Driver")
                        .WithMany("RaceEntries")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_race_entry_driver_driver_id");

                    b.HasOne("F1FantasyWorker.Core.Common.Race", "Race")
                        .WithMany("RaceEntries")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_race_entry_race_race_id");

                    b.Navigation("Driver");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("FantasyLineupDriver", b =>
                {
                    b.HasOne("F1FantasyWorker.Core.Common.Driver", null)
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_fantasy_lineup_driver_driver_driver_id");

                    b.HasOne("F1FantasyWorker.Core.Common.FantasyLineup", null)
                        .WithMany()
                        .HasForeignKey("FantasyLineupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fantasy_lineup_driver_fantasy_lineup_fantasy_lineup_id");
                });

            modelBuilder.Entity("PowerupFantasyLineup", b =>
                {
                    b.HasOne("F1FantasyWorker.Core.Common.FantasyLineup", null)
                        .WithMany()
                        .HasForeignKey("FantasyLineupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_powerup_fantasy_lineup_fantasy_lineup_fantasy_lineup_id");

                    b.HasOne("F1FantasyWorker.Core.Common.Powerup", null)
                        .WithMany()
                        .HasForeignKey("PowerupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_powerup_fantasy_lineup_powerup_powerup_id");
                });

            modelBuilder.Entity("UserLeague", b =>
                {
                    b.HasOne("F1FantasyWorker.Core.Common.League", null)
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_user_league_league_league_id");

                    b.HasOne("F1FantasyWorker.Core.Common.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_user_league_application_user_user_id");
                });

            modelBuilder.Entity("F1FantasyWorker.Core.Common.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");
                });

            modelBuilder.Entity("F1FantasyWorker.Core.Common.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserTokens");

                    b.Navigation("FantasyLineups");

                    b.Navigation("Leagues");

                    b.Navigation("Notifications");

                    b.Navigation("Predictions");
                });

            modelBuilder.Entity("F1FantasyWorker.Core.Common.Circuit", b =>
                {
                    b.Navigation("Predictions");

                    b.Navigation("Races");
                });

            modelBuilder.Entity("F1FantasyWorker.Core.Common.Constructor", b =>
                {
                    b.Navigation("AspNetUsers");

                    b.Navigation("DriverPredictions");
                });

            modelBuilder.Entity("F1FantasyWorker.Core.Common.Driver", b =>
                {
                    b.Navigation("AspNetUsers");

                    b.Navigation("DriverPredictions");

                    b.Navigation("RaceEntries");
                });

            modelBuilder.Entity("F1FantasyWorker.Core.Common.Prediction", b =>
                {
                    b.Navigation("DriverPredictions");
                });

            modelBuilder.Entity("F1FantasyWorker.Core.Common.Race", b =>
                {
                    b.Navigation("FantasyLineups");

                    b.Navigation("RaceEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
